using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Example taken from
# https://github.com/JuliaIO/ImageMagick.jl/blob/master/deps/build.jl
dependencies = [
    "build_Zlib.v1.2.11.jl",
    "build_GEOS.v3.7.2.jl",
    "build_SQLite.v3.28.0.jl",
    "build_PROJ.v6.1.0.jl",
    "build_MbedTLS.v2.6.1.jl"
]

for elem in dependencies
    # it's a bit faster to run the build in an anonymous module instead of
    # starting a new julia process
    m = Module(:__anon__)
    Core.include(m, (joinpath(@__DIR__, elem)))
end

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libgdal"], :libgdal),
    LibraryProduct(prefix, ["libcurl"], :libcurl),
    ExecutableProduct(prefix, "gdal_contour", :gdal_contour_path),
    ExecutableProduct(prefix, "gdal_grid", :gdal_grid_path),
    ExecutableProduct(prefix, "gdal_rasterize", :gdal_rasterize_path),
    ExecutableProduct(prefix, "gdal_translate", :gdal_translate_path),
    ExecutableProduct(prefix, "gdaladdo", :gdaladdo_path),
    ExecutableProduct(prefix, "gdalbuildvrt", :gdalbuildvrt_path),
    ExecutableProduct(prefix, "gdaldem", :gdaldem_path),
    ExecutableProduct(prefix, "gdalinfo", :gdalinfo_path),
    ExecutableProduct(prefix, "gdallocationinfo", :gdallocationinfo_path),
    ExecutableProduct(prefix, "gdalmanage", :gdalmanage_path),
    ExecutableProduct(prefix, "gdalsrsinfo", :gdalsrsinfo_path),
    ExecutableProduct(prefix, "gdaltindex", :gdaltindex_path),
    ExecutableProduct(prefix, "gdaltransform", :gdaltransform_path),
    ExecutableProduct(prefix, "gdalwarp", :gdalwarp_path),
    ExecutableProduct(prefix, "nearblack", :nearblack_path),
    ExecutableProduct(prefix, "ogr2ogr", :ogr2ogr_path),
    ExecutableProduct(prefix, "ogrinfo", :ogrinfo_path),
    ExecutableProduct(prefix, "ogrlineref", :ogrlineref_path),
    ExecutableProduct(prefix, "ogrtindex", :ogrtindex_path),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaGeo/GDALBuilder/releases/download/v3.0.2"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/GDAL.v3.0.2.aarch64-linux-gnu-gcc7.tar.gz", "6625d513295ea2364115f25e22bf7a7fdd54723f7844325b891c55e906082852"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/GDAL.v3.0.2.aarch64-linux-musl-gcc7.tar.gz", "508990baa5581db6f9dcfe6dc8c28e62fc9e5a26789a239b2eb8507e95fab6ea"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/GDAL.v3.0.2.arm-linux-gnueabihf-gcc7.tar.gz", "d12d7a44d2d7e4a0ea08e018bfa11f89bf3405fa13fdf89703d94c1d303d2751"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/GDAL.v3.0.2.arm-linux-musleabihf-gcc7.tar.gz", "5232f94bf0139828381d596a48bf91e128994000b8687ce6189ccc4f482e7a56"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/GDAL.v3.0.2.i686-linux-gnu-gcc7.tar.gz", "95a237e8ec17c8d05405d5536d74f4392c5f8d746b2e20fd2493f7c1ffaae21a"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/GDAL.v3.0.2.i686-linux-musl-gcc7.tar.gz", "78f2be2a31dd1d14ac4c703dbd6ca41405cc39c79c1043a4ce8b17cf78aa383e"),
    # removed compiler_abi as suggested in https://github.com/JuliaPackaging/BinaryBuilder.jl/issues/407#issuecomment-473688254
    # such that GCC4 platforms will also pick up this GCC7 build, ref https://github.com/JuliaPackaging/BinaryBuilder.jl/issues/407
    Windows(:i686) => ("$bin_prefix/GDAL.v3.0.2.i686-w64-mingw32-gcc7.tar.gz", "f8cb595312e58e7875b8fdc2196e43d5aa3f57aa8ddac55a3627684286b61aea"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/GDAL.v3.0.2.powerpc64le-linux-gnu-gcc7.tar.gz", "45da11bd2d6e3e796e0bc5e591252eaa84a934004a117c20bbf2350366088cb7"),
    MacOS(:x86_64) => ("$bin_prefix/GDAL.v3.0.2.x86_64-apple-darwin14.tar.gz", "b95a3b1eecef03ad02f2029d28c24f06739d3ee504dd32b933d829b0f7fdf3c7"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/GDAL.v3.0.2.x86_64-linux-gnu-gcc7.tar.gz", "1e87757f5043ce7834571289bcbf50f21dd51d555e8f1914e92240273944d765"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/GDAL.v3.0.2.x86_64-linux-musl-gcc7.tar.gz", "56e4af443a7121212e08541afda536acce127b45840e7809903a8bdfd4c77fc2"),
    FreeBSD(:x86_64) => ("$bin_prefix/GDAL.v3.0.2.x86_64-unknown-freebsd11.1.tar.gz", "ebec2f09f6888b30295f78a6cb6ef1deed583f7a0bc7bc91c73f5956042c8baf"),
    # removed compiler_abi as suggested in https://github.com/JuliaPackaging/BinaryBuilder.jl/issues/407#issuecomment-473688254
    # such that GCC4 platforms will also pick up this GCC7 build, ref https://github.com/JuliaPackaging/BinaryBuilder.jl/issues/407
    Windows(:x86_64) => ("$bin_prefix/GDAL.v3.0.2.x86_64-w64-mingw32-gcc7.tar.gz", "fc24874cf3789172e74773c6642d08b9cb39297117968555b59e57eec5b1f24e"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, ignore_platform=true, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps_gdal.jl"), products, verbose=verbose)

function include_deps(name)
    """
    module $name
        import Libdl
        path = joinpath(@__DIR__, $(repr(string("deps_", name, ".jl"))))
        isfile(path) || error("$name wasn't build correctly. Please run Pkg.build(\\\"GDAL\\\")")
        include(path)
    end
    using .$name
    """
end

open("deps.jl", "w") do io
    for dep in (:zlib, :geos, :sqlite, :proj, :mbedtls, :gdal)
        println(io, include_deps(dep))
    end
    println(io, """
    const libgdal = gdal.libgdal
    const libproj = proj.libproj
    function check_deps()
        zlib.check_deps()
        geos.check_deps()
        sqlite.check_deps()
        proj.check_deps()
        mbedtls.check_deps()
        gdal.check_deps()
    end
    """)
end
