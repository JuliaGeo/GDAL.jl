using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Example taken from
# https://github.com/JuliaIO/ImageMagick.jl/blob/sd/binaryprovider/deps/build.jl
dependencies = [
    "build_Zlib.v1.2.11.jl",
    "build_GEOS.v3.6.2.jl",
    "build_PROJ.v4.9.3.jl",
    "build_SQLiteBuilder.v0.1.0.jl",
    "build_LibCURL.v7.61.0.jl",
]

for elem in dependencies
    # it's a bit faster to run the build in an anonymous module instead of
    # starting a new julia process
    m = Module(:__anon__)
    Core.eval(m, :(Main.include($(joinpath(@__DIR__, elem)))))
end

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libgdal"], :libgdal),
    ExecutableProduct(prefix, "gdal_contour", :gdal_contour_path),
    ExecutableProduct(prefix, "gdal_grid", :gdal_grid_path),
    ExecutableProduct(prefix, "gdal_rasterize", :gdal_rasterize_path),
    ExecutableProduct(prefix, "gdal_translate", :gdal_translate_path),
    ExecutableProduct(prefix, "gdaladdo", :gdaladdo_path),
    ExecutableProduct(prefix, "gdalbuildvrt", :gdalbuildvrt_path),
    ExecutableProduct(prefix, "gdaldem", :gdaldem_path),
    ExecutableProduct(prefix, "gdalinfo", :gdalinfo_path),
    ExecutableProduct(prefix, "gdallocationinfo", :gdallocationinfo_path),
    ExecutableProduct(prefix, "gdalmanage", :gdalmanage_path),
    ExecutableProduct(prefix, "gdalsrsinfo", :gdalsrsinfo_path),
    ExecutableProduct(prefix, "gdaltindex", :gdaltindex_path),
    ExecutableProduct(prefix, "gdaltransform", :gdaltransform_path),
    ExecutableProduct(prefix, "gdalwarp", :gdalwarp_path),
    ExecutableProduct(prefix, "nearblack", :nearblack_path),
    ExecutableProduct(prefix, "ogr2ogr", :ogr2ogr_path),
    ExecutableProduct(prefix, "ogrinfo", :ogrinfo_path),
    ExecutableProduct(prefix, "ogrlineref", :ogrlineref_path),
    ExecutableProduct(prefix, "ogrtindex", :ogrtindex_path),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaGeo/GDALBuilder/releases/download/v2.3.2-0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/GDAL.v2.3.2.aarch64-linux-gnu.tar.gz", "23356efeb2d91a2bc9357f1e3fa19422b12a3d32c82a538b62787e00513473d8"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/GDAL.v2.3.2.arm-linux-gnueabihf.tar.gz", "c1a23ed5898dc8a0836dad236b9e1a085a8a6f8894350ded5c7da382ba1e51f2"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/GDAL.v2.3.2.i686-linux-gnu.tar.gz", "425baa065a5ecb47ef53dda083e26eb7da89f505f48ad33f8aabbe8de2a57594"),
    Windows(:i686) => ("$bin_prefix/GDAL.v2.3.2.i686-w64-mingw32.tar.gz", "9f65fb3ae3f0cbd5d68efcce46239ba823e312f1b0b5e49d4c079d280f5d21eb"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/GDAL.v2.3.2.powerpc64le-linux-gnu.tar.gz", "d656f1fed03f4c58f0361966e2b44b8b5bb38f440c77383c9a16bad1ab2bfcae"),
    MacOS(:x86_64) => ("$bin_prefix/GDAL.v2.3.2.x86_64-apple-darwin14.tar.gz", "5edd6ce8b90c4058ee084accdfb5de02b418cfa949665e9b5a75dab9d6be5bc7"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/GDAL.v2.3.2.x86_64-linux-gnu.tar.gz", "5e9128cc3e858bfa13d16425322576d1ae3b05a0e03e993fbc069b51b2067584"),
    Windows(:x86_64) => ("$bin_prefix/GDAL.v2.3.2.x86_64-w64-mingw32.tar.gz", "c62502fb0d39281f4cf6ca1c1f51c6d3e0b59a81491057c1598311367a0fad4b"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
