using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libgdal"], :libgdal),
    ExecutableProduct(prefix, "gdalinfo", :gdalinfo_path),
    ExecutableProduct(prefix, "gdalwarp", :gdalwarp_path),
    ExecutableProduct(prefix, "gdal_translate", :gdal_translate_path),
    ExecutableProduct(prefix, "ogr2ogr", :ogr2ogr_path),
    ExecutableProduct(prefix, "ogrinfo", :ogrinfo_path),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/visr/GDALBuilder/releases/download/v2.2.4-0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/GDAL.aarch64-linux-gnu.tar.gz", "b540461eee2d99643111ab6108dd9df3de9f4b2f6e4a56933db67accf76f96dc"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/GDAL.arm-linux-gnueabihf.tar.gz", "373f063f3ce3770ab1c37e6b676fb5a7871ec216631d567bc0a4ae0d7c23df90"),
    Linux(:i686, :glibc) => ("$bin_prefix/GDAL.i686-linux-gnu.tar.gz", "7eb8460c0feda4bac688e37c7df6fca04905930bfe3e5881062954e2349bb40b"),
    Windows(:i686) => ("$bin_prefix/GDAL.i686-w64-mingw32.tar.gz", "c42d89293ccead7b2f1d0cf2d84e829ca6789781d36ff18b6da622a59d58fd53"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/GDAL.powerpc64le-linux-gnu.tar.gz", "c3b41b04a73f891de819dab5f35d2d128a9618a28a013508c70ddb3164a39e74"),
    MacOS(:x86_64) => ("$bin_prefix/GDAL.x86_64-apple-darwin14.tar.gz", "b868631a4bd9de3aa6b6c75fdc88419ea2762424d53dc56758a5822848e0dd75"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/GDAL.x86_64-linux-gnu.tar.gz", "b3e592200201dbcfc1b2a9f172fd60f75dccc14ca5d6e0d577f4fc09200d1993"),
    Windows(:x86_64) => ("$bin_prefix/GDAL.x86_64-w64-mingw32.tar.gz", "22976e025e3145e393a2a8b1e155d0a776057c381d0e51a94ceac1343f979462"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
