using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Example taken from
# https://github.com/JuliaIO/ImageMagick.jl/blob/master/deps/build.jl
dependencies = [
    "build_Zlib.v1.2.11.jl",
    "build_GEOS.v3.7.2.jl",
    "build_SQLite.v3.28.0.jl",
    "build_PROJ.v6.1.0.jl",
    "build_MbedTLS.v2.6.1.jl"
]

for elem in dependencies
    # it's a bit faster to run the build in an anonymous module instead of
    # starting a new julia process
    m = Module(:__anon__)
    Core.include(m, (joinpath(@__DIR__, elem)))
end

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libgdal"], :libgdal),
    LibraryProduct(prefix, ["libcurl"], :libcurl),
    ExecutableProduct(prefix, "gdal_contour", :gdal_contour_path),
    ExecutableProduct(prefix, "gdal_grid", :gdal_grid_path),
    ExecutableProduct(prefix, "gdal_rasterize", :gdal_rasterize_path),
    ExecutableProduct(prefix, "gdal_translate", :gdal_translate_path),
    ExecutableProduct(prefix, "gdaladdo", :gdaladdo_path),
    ExecutableProduct(prefix, "gdalbuildvrt", :gdalbuildvrt_path),
    ExecutableProduct(prefix, "gdaldem", :gdaldem_path),
    ExecutableProduct(prefix, "gdalinfo", :gdalinfo_path),
    ExecutableProduct(prefix, "gdallocationinfo", :gdallocationinfo_path),
    ExecutableProduct(prefix, "gdalmanage", :gdalmanage_path),
    ExecutableProduct(prefix, "gdalsrsinfo", :gdalsrsinfo_path),
    ExecutableProduct(prefix, "gdaltindex", :gdaltindex_path),
    ExecutableProduct(prefix, "gdaltransform", :gdaltransform_path),
    ExecutableProduct(prefix, "gdalwarp", :gdalwarp_path),
    ExecutableProduct(prefix, "nearblack", :nearblack_path),
    ExecutableProduct(prefix, "ogr2ogr", :ogr2ogr_path),
    ExecutableProduct(prefix, "ogrinfo", :ogrinfo_path),
    ExecutableProduct(prefix, "ogrlineref", :ogrlineref_path),
    ExecutableProduct(prefix, "ogrtindex", :ogrtindex_path),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaGeo/GDALBuilder/releases/download/v3.0.2-1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/GDAL.v3.0.2.aarch64-linux-gnu-gcc7.tar.gz", "7be8cdfdb823424b0be778bd9675f2db8394f6cbe8a4407573f5ad24e047ef7a"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/GDAL.v3.0.2.aarch64-linux-musl-gcc7.tar.gz", "223c4b22dfd86037ac5d4fabf3ce9c21405f214447e6daf100aa67743c091457"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/GDAL.v3.0.2.arm-linux-gnueabihf-gcc7.tar.gz", "61ea5557f91dd49efc0e3c23db52f894b07fe37fa9b451535995be7020cb3210"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/GDAL.v3.0.2.arm-linux-musleabihf-gcc7.tar.gz", "947101abd918f21b302be0c0160fb9619acc36ed829fb9600c8065768f98fe08"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/GDAL.v3.0.2.i686-linux-gnu-gcc7.tar.gz", "7dea2c01ec2d045f0e404f8622ec2779ecf37e04163be94833a1cf35dd131dea"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/GDAL.v3.0.2.i686-linux-musl-gcc7.tar.gz", "9354ee7a3e0db074fedba8904e14bca10bee88e59551eca4ed124cbec572ee2f"),
    # removed compiler_abi as suggested in https://github.com/JuliaPackaging/BinaryBuilder.jl/issues/407#issuecomment-473688254
    # such that GCC4 platforms will also pick up this GCC7 build, ref https://github.com/JuliaPackaging/BinaryBuilder.jl/issues/407
    Windows(:i686) => ("$bin_prefix/GDAL.v3.0.2.i686-w64-mingw32-gcc7.tar.gz", "d09aa8b69bd5915ad797be86f1a04c01a1cf38407b6f48cc80d724284ede63ef"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/GDAL.v3.0.2.powerpc64le-linux-gnu-gcc7.tar.gz", "f064d0bfd73e803876c43fd7ab4d33ecbc56cc4751a027eb5a3656a0edcb229d"),
    MacOS(:x86_64) => ("$bin_prefix/GDAL.v3.0.2.x86_64-apple-darwin14.tar.gz", "4e58078594ce150612428d14fa494b41273362674ee46b4670f335f3c6d0f8e2"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/GDAL.v3.0.2.x86_64-linux-gnu-gcc7.tar.gz", "956dd45cdb7b17d544fc4441e3d8b191482472b63d4bc313865a9076061aeb4a"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/GDAL.v3.0.2.x86_64-linux-musl-gcc7.tar.gz", "d75c4e4b434c0cf5601bca6d7d343902a0f0a962d98e93929c9f0bf15c97cce5"),
    FreeBSD(:x86_64) => ("$bin_prefix/GDAL.v3.0.2.x86_64-unknown-freebsd11.1.tar.gz", "ebb4a0f340db48e62e36c81d9c092b93421a643ab2b90d6c06262ea363cd185c"),
    # removed compiler_abi as suggested in https://github.com/JuliaPackaging/BinaryBuilder.jl/issues/407#issuecomment-473688254
    # such that GCC4 platforms will also pick up this GCC7 build, ref https://github.com/JuliaPackaging/BinaryBuilder.jl/issues/407
    Windows(:x86_64) => ("$bin_prefix/GDAL.v3.0.2.x86_64-w64-mingw32-gcc7.tar.gz", "75e35bab535edeb7588d8b695910bfb2f4827bfc35143c441eb74f7f79c7b591"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, ignore_platform=true, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps_gdal.jl"), products, verbose=verbose)

function include_deps(name)
    """
    module $name
        import Libdl
        path = joinpath(@__DIR__, $(repr(string("deps_", name, ".jl"))))
        isfile(path) || error("$name wasn't build correctly. Please run Pkg.build(\\\"GDAL\\\")")
        include(path)
    end
    using .$name
    """
end

open("deps.jl", "w") do io
    for dep in (:zlib, :geos, :sqlite, :proj, :mbedtls, :gdal)
        println(io, include_deps(dep))
    end
    println(io, """
    const libgdal = gdal.libgdal
    const libproj = proj.libproj
    function check_deps()
        zlib.check_deps()
        geos.check_deps()
        sqlite.check_deps()
        proj.check_deps()
        mbedtls.check_deps()
        gdal.check_deps()
    end
    """)
end
