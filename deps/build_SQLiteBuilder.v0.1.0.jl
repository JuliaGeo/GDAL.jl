using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libsqlite3"], :libsqlite),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaDatabases/SQLiteBuilder/releases/download/v0.9.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/SQLiteBuilder.v0.1.0.aarch64-linux-gnu.tar.gz", "a72759ea789697475bc268631cd45723967403dcbd630e7090310acf3fe4e213"),
    Linux(:aarch64, :musl) => ("$bin_prefix/SQLiteBuilder.v0.1.0.aarch64-linux-musl.tar.gz", "865ad1af7907d6fad61a217cc347e88c31a1e14fde1e8b1842be30f40caadb2f"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/SQLiteBuilder.v0.1.0.arm-linux-gnueabihf.tar.gz", "213587798e00e3d55600bfd8e9224ec7d25051df36443007c22d2616744d82a6"),
    Linux(:armv7l, :musl, :eabihf) => ("$bin_prefix/SQLiteBuilder.v0.1.0.arm-linux-musleabihf.tar.gz", "28aec3c8eba103d9680dcd9a869189a7a49b16fb26df0cf696025050cfa94b7c"),
    Linux(:i686, :glibc) => ("$bin_prefix/SQLiteBuilder.v0.1.0.i686-linux-gnu.tar.gz", "7b65157e359c44b2a57f12d69badb33dfe49af91a1550a2a4ce73fa39437384c"),
    Linux(:i686, :musl) => ("$bin_prefix/SQLiteBuilder.v0.1.0.i686-linux-musl.tar.gz", "6bd07d37a3471faae3eccbdda15331e2fef3617dc6517cdd5957ff0f232bfc66"),
    Windows(:i686) => ("$bin_prefix/SQLiteBuilder.v0.1.0.i686-w64-mingw32.tar.gz", "152e7c7933c3b1fcda56177a13d37e130d6dc33dea8b4af18f462ef8bc415ba4"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/SQLiteBuilder.v0.1.0.powerpc64le-linux-gnu.tar.gz", "994abe7690163a94b58f589808380ac14e594d2a088d519ff1faf56365f20d10"),
    MacOS(:x86_64) => ("$bin_prefix/SQLiteBuilder.v0.1.0.x86_64-apple-darwin14.tar.gz", "acc1d370715be7f4a765e517ae8b4a9fd0ee9ffb08ffa6c81118aa5dc0db3eca"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/SQLiteBuilder.v0.1.0.x86_64-linux-gnu.tar.gz", "45ba487144ff8e11271130ae9abbb3af5722739608dee6ef44be0d0c1205fa9a"),
    Linux(:x86_64, :musl) => ("$bin_prefix/SQLiteBuilder.v0.1.0.x86_64-linux-musl.tar.gz", "998b995bc9a2d66a99de2e85a210af865e4993af51a295ce4dd88c26136a4951"),
    FreeBSD(:x86_64) => ("$bin_prefix/SQLiteBuilder.v0.1.0.x86_64-unknown-freebsd11.1.tar.gz", "060d7a0512d16eed4b97787eaa70cb596695c300a3859a57b72b37c4e2be54e0"),
    Windows(:x86_64) => ("$bin_prefix/SQLiteBuilder.v0.1.0.x86_64-w64-mingw32.tar.gz", "dd323668391ede718e39994819cd475568aadc12563968dfd14900e338b78841"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
