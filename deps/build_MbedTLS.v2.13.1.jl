using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
# const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libmbedcrypto"], :libmbedcrypto),
    LibraryProduct(prefix, ["libmbedtls"], :libmbedtls),
    LibraryProduct(prefix, ["libmbedx509"], :libmbedx509),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaWeb/MbedTLSBuilder/releases/download/v0.16.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/MbedTLS.v2.13.1.aarch64-linux-gnu.tar.gz", "051b7b40911154196d0378bd41a2cc0182e4c5e3aa06506702adca36a875018f"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/MbedTLS.v2.13.1.aarch64-linux-musl.tar.gz", "d031de3dd7723b647aa8dcb5fbe9777e7db0927e04a8cbf779a4a9da1f767061"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/MbedTLS.v2.13.1.arm-linux-gnueabihf.tar.gz", "77adab909961fc750579c0fec87152b74048e466d8b9ca80df6d4f286fc92101"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/MbedTLS.v2.13.1.arm-linux-musleabihf.tar.gz", "a47e3d6bb09bb7564fea16dbe099e7b772f18128b99a5f92627a97dca3266f5d"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/MbedTLS.v2.13.1.i686-linux-gnu.tar.gz", "d35401469c134a151ab139e0fd400729f72c223ef8c0a736a76aae63c48dfa95"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/MbedTLS.v2.13.1.i686-linux-musl.tar.gz", "2fa1b8674a3898eb08b3d28bd45fbfe022137a259edf407c564b5a817526647d"),
    Windows(:i686) => ("$bin_prefix/MbedTLS.v2.13.1.i686-w64-mingw32.tar.gz", "5fc0d5749fe644eb60cc5dda361831c0c64e6847559d1c6b719b185979e867ae"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/MbedTLS.v2.13.1.powerpc64le-linux-gnu.tar.gz", "8d36c2085f6cec55077fb7af485399a2b8d4a55033962c2a352d764fc153590f"),
    MacOS(:x86_64) => ("$bin_prefix/MbedTLS.v2.13.1.x86_64-apple-darwin14.tar.gz", "907df87621d4a63e1621c585cf351cf4d34a2e880c124f04cb4b404c690cc224"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/MbedTLS.v2.13.1.x86_64-linux-gnu.tar.gz", "46d14792f88781f19c30ec0e9fd1815d61906d9f002499d3e277e206da484a99"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/MbedTLS.v2.13.1.x86_64-linux-musl.tar.gz", "fe43ca4323d295f2a05ff1ffde8c724ea43fad6a38d5b902dc8aee47a9160ad4"),
    FreeBSD(:x86_64) => ("$bin_prefix/MbedTLS.v2.13.1.x86_64-unknown-freebsd11.1.tar.gz", "537ab0cdc5fcfb0acc9bb6d013746f80007332b297f88423db1dc1306769f9b5"),
    Windows(:x86_64) => ("$bin_prefix/MbedTLS.v2.13.1.x86_64-w64-mingw32.tar.gz", "99d7f51190b841731139a5a561b7ee54fe99c1688c27ca3efd75a047da88eacf"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
