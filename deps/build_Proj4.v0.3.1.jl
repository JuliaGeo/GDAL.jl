using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libproj"], :libproj),
    FileProduct(prefix, "share/proj/CH", :ch_path),
    FileProduct(prefix, "share/proj/epsg", :epsg_path),
    FileProduct(prefix, "share/proj/esri", :esri_path),
    FileProduct(prefix, "share/proj/esri.extra", :esri_extra_path),
    FileProduct(prefix, "share/proj/GL27", :gl27_path),
    FileProduct(prefix, "share/proj/IGNF", :ignf_path),
    FileProduct(prefix, "share/proj/nad27", :nad27_path),
    FileProduct(prefix, "share/proj/nad83", :nad83_path),
    FileProduct(prefix, "share/proj/nad.lst", :nad_lst_path),
    FileProduct(prefix, "share/proj/other.extra", :other_extra_path),
    FileProduct(prefix, "share/proj/proj_def.dat", :proj_def_dat_path),
    FileProduct(prefix, "share/proj/world", :world_path),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaGeo/PROJBuilder/releases/download/v4.9.3-2"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/PROJ.aarch64-linux-gnu.tar.gz", "3488c720fb26c5162716a16053d76541477399b37e664905921a5d153487a856"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/PROJ.arm-linux-gnueabihf.tar.gz", "d5930c993de2446c7eae58898390e485bfe1938ec87c51b2c41cfb16a0d6c253"),
    Linux(:i686, :glibc) => ("$bin_prefix/PROJ.i686-linux-gnu.tar.gz", "b6c564f4f7535e567bfd52cdf8b04142663fc374d962f6c6f08700eda04f4763"),
    Windows(:i686) => ("$bin_prefix/PROJ.i686-w64-mingw32.tar.gz", "c7fdb284bdc9fc9a8f35850f385c23eb583f9473c31debc109d849dcde60cde3"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/PROJ.powerpc64le-linux-gnu.tar.gz", "2d4b915f3614aed3a0cb0917a31e34ddd2da2a7cc77acf9c27d6e99000f313dc"),
    MacOS(:x86_64) => ("$bin_prefix/PROJ.x86_64-apple-darwin14.tar.gz", "a50ed5aa1d6adb8671af30a66653668cda2ded97f04fcc6ed8ee66f068284c3a"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/PROJ.x86_64-linux-gnu.tar.gz", "9a306fc2e67278ab94a098a32c3b92e652887c889ba3ac1a06b22daf6091f9c5"),
    Windows(:x86_64) => ("$bin_prefix/PROJ.x86_64-w64-mingw32.tar.gz", "a6880fab18b7a36dbced23878c059c7cdb936b46e4bc42abeb6bd4868e5a44b4"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
