using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
# const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libproj"], :libproj),
    FileProduct(prefix, "share/proj/CH", :ch_path),
    FileProduct(prefix, "share/proj/epsg", :epsg_path),
    FileProduct(prefix, "share/proj/esri", :esri_path),
    FileProduct(prefix, "share/proj/esri.extra", :esri_extra_path),
    FileProduct(prefix, "share/proj/GL27", :gl27_path),
    FileProduct(prefix, "share/proj/IGNF", :ignf_path),
    FileProduct(prefix, "share/proj/nad27", :nad27_path),
    FileProduct(prefix, "share/proj/nad83", :nad83_path),
    FileProduct(prefix, "share/proj/nad.lst", :nad_lst_path),
    FileProduct(prefix, "share/proj/other.extra", :other_extra_path),
    FileProduct(prefix, "share/proj/proj_def.dat", :proj_def_dat_path),
    FileProduct(prefix, "share/proj/world", :world_path),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaGeo/PROJBuilder/releases/download/v5.2.0-0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/PROJ.v5.2.0.aarch64-linux-gnu.tar.gz", "649a0198f3876f02ab2114c2858d96d6e687fcccaa796508422905f6299a694e"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/PROJ.v5.2.0.aarch64-linux-musl.tar.gz", "b28dd0c91858b55176082c69c164763929a0e11451ea92ff4be4497169f6b3ef"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/PROJ.v5.2.0.arm-linux-gnueabihf.tar.gz", "5ba6eb9dba5d54da3dcd768f00d6d5d69b6ab07f5d6928a5f0b55dad78901d16"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/PROJ.v5.2.0.arm-linux-musleabihf.tar.gz", "83ac4fa98963b4e9ebdd1815ab4bb10841f808b55e7f030af7eec29746c2e918"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/PROJ.v5.2.0.i686-linux-gnu.tar.gz", "1dd7f2d8280cd2efd42753419562f961f448b025cd8a131f707d4b857ade344d"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/PROJ.v5.2.0.i686-linux-musl.tar.gz", "ff0a3341eba3ce003f7d69807e69faf84583489a5b462bb98d15abc3d4f658db"),
    Windows(:i686) => ("$bin_prefix/PROJ.v5.2.0.i686-w64-mingw32.tar.gz", "4b6da801e92fbd8398c308480480908b706b3436d683cc43efb559cbd32b1981"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/PROJ.v5.2.0.powerpc64le-linux-gnu.tar.gz", "635bd8cfbcb04746feb2a57830c55926919a57a87cf4cbc6009c6ead87f98606"),
    MacOS(:x86_64) => ("$bin_prefix/PROJ.v5.2.0.x86_64-apple-darwin14.tar.gz", "3955fefd07edb14e982a73f233aa7651ffd0631b17b034666da00c0178ba4b07"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/PROJ.v5.2.0.x86_64-linux-gnu.tar.gz", "4a98a0cda73f7ee52168afe7868e48541236eaeff570bf3e6e41d4c6b72ee403"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/PROJ.v5.2.0.x86_64-linux-musl.tar.gz", "42aae4d3963c8ceed26e6e1d6a3b3897141e97d783aa850594fb9b7bbf833872"),
    FreeBSD(:x86_64) => ("$bin_prefix/PROJ.v5.2.0.x86_64-unknown-freebsd11.1.tar.gz", "d28b25de953c24087540ef134491a6d0c1fa69c515aa57a4bc073e1224b07959"),
    Windows(:x86_64) => ("$bin_prefix/PROJ.v5.2.0.x86_64-w64-mingw32.tar.gz", "a2abd4d5bfb76dee06b3389d68591dc388b1a077a671b80cc8a00fba281aac3f"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
